# .github/workflows/android-release.yml

name: Android CI/CD

# 触发条件
on:
  # 1. 在创建新的 Release 时触发
  release:
    types: [created]

  # 2. 允许在 Actions 页面手动触发
  workflow_dispatch:

jobs:
  build:
    name: Build Release APK
    runs-on: ubuntu-latest

    steps:
      # 步骤 1: 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 步骤 2: 设置 JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # 步骤 3: 授权 Gradle Wrapper
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 步骤 4: 编译 FCL 模块的 Release APK
      # 修改点：指定编译 FCL module
      - name: Build with Gradle
        run: ./gradlew assembleRelease -Darch=arm64
  
      # 步骤 5: [条件性上传] 如果是 Release 触发，则上传所有 APK 到 Release Assets
      # 仅当触发事件是 'release' 时，此步骤才会执行
      - name: Upload All APKs to Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          # 修改点：使用通配符匹配 FCL 模块输出目录下的所有 .apk 文件
          asset_path: FCL/build/outputs/apk/release/*.apk
          # 注意：asset_name 已被移除。当使用通配符上传多个文件时，
          # action 会自动使用每个文件的原始名称作为 asset_name。
          asset_content_type: application/vnd.android.package-archive

      # 步骤 6: [条件性上传] 如果是手动触发，则将所有 APK 上传到 Action Artifacts
      # 仅当触发事件是 'workflow_dispatch' 时，此步骤才会执行
      - name: Upload All APKs to Action Artifacts
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          # Artifact 的名称，会显示在下载区域 (会是一个 zip 文件)
          name: release-apks
          # 修改点：使用通配符匹配 FCL 模块输出目录下的所有 .apk 文件
          path: FCL/build/outputs/apk/release/*.apk